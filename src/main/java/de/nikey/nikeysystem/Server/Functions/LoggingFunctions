package de.nikey.nikeysystem.Server.Functions;

import de.nikey.nikeysystem.Server.History.HistoryElement;
import org.bukkit.Bukkit;
import org.bukkit.block.Block;
import org.bukkit.entity.Creeper;
import org.bukkit.entity.EnderCrystal;
import org.bukkit.entity.Player;
import org.bukkit.entity.TNTPrimed;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockExplodeEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.player.PlayerBucketEmptyEvent;
import org.bukkit.event.player.PlayerBucketFillEvent;

import java.util.UUID;

public class LoggingFunctions implements Listener {
    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockBreak(BlockBreakEvent event){
        final Block block = event.getBlock();
        addBlockHistoryEntry(HistoryElement.Type.BREAK, event.getPlayer(), block);
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockPlace(BlockPlaceEvent event){
        final Block block = event.getBlock();
        addBlockHistoryEntry(HistoryElement.Type.PLACE, event.getPlayer(), block);
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBucketEmptied(PlayerBucketEmptyEvent event){
        Bukkit.getScheduler().scheduleSyncDelayedTask(BlockHistoryPlugin.getInstance(), () -> {
            final Block block = event.getBlock();
            addBlockHistoryEntry(HistoryElement.Type.EMPTY_BUCKET, event.getPlayer(), block);
        });
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBucketFilled(PlayerBucketFillEvent event){
        final Block block = event.getBlock();
        addBlockHistoryEntry(HistoryElement.Type.FILL_BUCKET, event.getPlayer(), block);
    }

    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onEntityExplode(EntityExplodeEvent event){
        if (event.getEntity() instanceof TNTPrimed){
            for (Block block : event.blockList()) {
                addBlockHistoryEntry(HistoryElement.Type.EXPLODE_TNT, primed.getSource() instanceof Player player ? player : null, block);
            }
        } else if (event.getEntity() instanceof Creeper){
            Creeper creeper = (Creeper) event.getEntity();
            final UUID igniter = igniters.remove(creeper.getUniqueId());
            for (Block block : event.blockList()) {
                addBlockHistoryEntry(HistoryElement.Type.EXPLODE_CREEPER, igniter, block);
            }
        } else if (event.getEntity() instanceof EnderCrystal ){
            EnderCrystal crystal = (EnderCrystal) event.getEntity();
            final UUID igniter = igniters.remove(crystal.getUniqueId());
            for (Block block : event.blockList()) {
                addBlockHistoryEntry(HistoryElement.Type.EXPLODE_END_CRYSTAL, igniter, block);
            }
        }
    }


    @EventHandler(ignoreCancelled = true, priority = EventPriority.MONITOR)
    public void onBlockExplode(BlockExplodeEvent event){
        Block explodedBlock = event.getBlock();
        UUID exploder = blocks.remove(explodedBlock);
        HistoryElement.Type type = HistoryElement.Type.EXPLODE_BLOCK;
        for (Block block : event.blockList()) {
            addBlockHistoryEntry(type, exploder, block);
        }
    }
}
